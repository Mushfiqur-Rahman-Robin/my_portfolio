name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - migration/django-react-stack
  pull_request:
    branches:
      - main

jobs:
  backend-checks:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ secrets.DB_TEST_NAME }}
          POSTGRES_USER: ${{ secrets.DB_TEST_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      chromadb:
        # Pinned version to 0.4.14 (stable and widely used)
        image: chromadb/chroma:0.4.14
        ports:
          - 8001:8000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: pip install uv

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          uv venv
          uv sync
          uv sync --extra dev

      - name: Create logs directory
        working-directory: ./backend
        run: mkdir -p logs && chmod -R 777 logs

      - name: Run linter (Ruff)
        working-directory: ./backend
        run: |
          curl -LsSf https://astral.sh/ruff/install.sh | sh
          ruff check . --fix

      - name: Run formatter check (Ruff)
        working-directory: ./backend
        run: ruff format .

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U ${{ secrets.DB_TEST_USER }}; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Wait for ChromaDB
        run: |
          # --- FIX: Use the /heartbeat endpoint for ChromaDB 0.4.14 ---
          until curl -f http://localhost:8001/api/v1/heartbeat; do
            echo "Waiting for ChromaDB..."
            sleep 2
          done

      - name: Apply migrations
        working-directory: ./backend
        env:
          DJANGO_SETTINGS_MODULE: core.test_settings
          POSTGRES_USER: ${{ secrets.DB_TEST_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_TEST_NAME }}
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY_TEST }}
          DEBUG: "False"
          PYTHONPATH: .
          EMAIL_BACKEND: "django.core.mail.backends.locmem.EmailBackend"
          DEFAULT_FROM_EMAIL: "test@example.com"
          ADMIN_EMAIL: "admin@example.com"
          CSRF_TRUSTED_ORIGINS: "http://localhost:8000"
          CHROMA_HOST: localhost
          CHROMA_PORT: 8001
        run: |
          source .venv/bin/activate
          export DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB
          python manage.py migrate

      - name: Set up Django
        working-directory: ./backend
        env:
          DJANGO_SETTINGS_MODULE: core.test_settings
          POSTGRES_USER: ${{ secrets.DB_TEST_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_TEST_NAME }}
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY_TEST }}
          DEBUG: "False"
          PYTHONPATH: .
          EMAIL_BACKEND: "django.core.mail.backends.locmem.EmailBackend"
          DEFAULT_FROM_EMAIL: "test@example.com"
          ADMIN_EMAIL: "admin@example.com"
          CSRF_TRUSTED_ORIGINS: "http://localhost:8000"
          CHROMA_HOST: localhost
          CHROMA_PORT: 8001
        run: |
          source .venv/bin/activate
          export DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB
          python manage.py check

      - name: Run tests (Pytest)
        working-directory: ./backend
        env:
          DJANGO_SETTINGS_MODULE: core.test_settings
          POSTGRES_USER: ${{ secrets.DB_TEST_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_TEST_NAME }}
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY_TEST }}
          DEBUG: "False"
          PYTHONPATH: .
          EMAIL_BACKEND: "django.core.mail.backends.locmem.EmailBackend"
          DEFAULT_FROM_EMAIL: "test@example.com"
          ADMIN_EMAIL: "admin@example.com"
          CSRF_TRUSTED_ORIGINS: "http://localhost:8000"
          CHROMA_HOST: localhost
          CHROMA_PORT: 8001
        run: |
          source .venv/bin/activate
          export DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB
          pytest --override-ini django_find_project=true

  frontend-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linter and type check
        working-directory: ./frontend
        run: npm run lint

      - name: Build project
        working-directory: ./frontend
        run: npm run build

  deploy:
    needs: [backend-checks, frontend-checks]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd ~/my_portfolio
            git pull origin main
            docker compose up --build -d
            docker compose exec backend python manage.py migrate --noinput
            docker system prune -af
